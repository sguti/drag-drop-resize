{"version":3,"sources":["ng://dragy/lib/services/internal-registry.service.ts","ng://dragy/lib/directives/draggable.directive.ts","ng://dragy/lib/directives/droppable.directive.ts","ng://dragy/lib/services/component-registry.service.ts","ng://dragy/lib/services/component-factory.service.ts","ng://dragy/lib/components/drop-zone/drop-zone.component.ts","ng://dragy/lib/dragy.module.ts","ng://dragy/lib/interfaces/IWidgetProjection.ts","ng://dragy/lib/models/drag-data.model.ts","ng://dragy/lib/models/draggable-directive.config.ts","ng://dragy/lib/models/drop-success-synthetic-event.ts","ng://dragy/lib/models/drop-zone.state.ts","ng://dragy/lib/models/view-container-item.model.ts"],"names":["GInternalRegistryService","this","widgetRegistry","dragEventRegistry","viewContainerRegistry","prototype","registerWidget","config","widgetId","unRegisterWidget","getWidgetConfig","addDragData","dragId","dragData","getDragData","clearDragData","addViewContainerItem","identifier","entry","getViewContainerItem","identifer","getAllViewContainerItem","_this","Object","keys","map","key","removeViewContainerItem","checkViewContainerItemEntry","Injectable","args","providedIn","DraggableDirective","elementRef","internalRegistry","registered","ngOnInit","nativeElement","setAttribute","console","error","showInvalidWidget","ngOnDestroy","border","style","setTimeout","mouseDownHandler","event","offsetX","offsetY","log","dragStartHandler","dragImage","eventId","Math","floor","random","dataTransfer","setData","dragEndHandler","Directive","selector","ElementRef","Input","HostListener","DroppableDirective","renderer","isAlive","validDropTarget","dropsuccess","EventEmitter","dragOverHandler","preventDefault","react","getBoundingClientRect","dropItemStartX","clientX","left","_current","dropItemEndX","componentWidth","dropItemStartY","clientY","top","dropItemEndY","componentHeight","some","registryItem","startX","endX","startY","endY","_tempDropLocation","borderColor","document","createElement","position","fromEvent","pipe","takeWhile","tap","distinctUntilChanged","event1","event2","debounce","timer","subscribe","dragEnterHandler","dropEffect","types","height","width","appendChild","dragLeaveHandler","dropHandler","dropSuccessEvent","componentName","dragSourceSelector","top.px","replace","left.px","emit","removeChild","Renderer2","Output","GComponentRegistryService","registry","Set","register","component","warn","get","GComponentFactoryService","resolver","componentFactory","resolveComponentFactory","ComponentFactoryResolver","DropZoneComponent","gComponentFactoryService","update","ngOnChanges","changes","firstChange","state","items","hasOwnProperty","dropZoneItem","projectWidgetInView","dropsuccessHandler","syntheticEvent","length","factory","container","createComponent","widgetProjection","_remove","_","isActive","first","widgetIdentifier","remove","viewContainerIndex","computedStyle","getComputedStyle","location","children","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","read","ViewContainerRef","DragyModule","NgModule","declarations","imports","CommonModule","providers","exports","IWidgetProjection","DragData","DraggableDirectiveConfig","DropSuccessSyntheticEvent","DropZoneState","DropZoneItem","ViewContainerItem"],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { DraggableDirectiveConfig } from \"../models/draggable-directive.config\";\nimport { DragData } from \"../models/drag-data.model\";\nimport { ViewContainerItem } from \"../models/view-container-item.model\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class GInternalRegistryService {\n  constructor() {}\n  private widgetRegistry: { [key: string]: DraggableDirectiveConfig } = {};\n  private dragEventRegistry: { [key: string]: DragData } = {};\n  private viewContainerRegistry: {\n    [key: string]: ViewContainerItem;\n  } = {};\n  registerWidget(config: DraggableDirectiveConfig): boolean {\n    if (!config.widgetId || this.widgetRegistry[config.widgetId]) {\n      return false;\n    }\n    this.widgetRegistry[config.widgetId] = config;\n    return true;\n  }\n  unRegisterWidget(widgetId: string): boolean {\n    return delete this.widgetRegistry[widgetId];\n  }\n  getWidgetConfig(widgetId: string): DraggableDirectiveConfig {\n    return this.widgetRegistry[widgetId];\n  }\n  addDragData(dragId: string, dragData: DragData) {\n    this.dragEventRegistry[dragId] = dragData;\n  }\n  getDragData(dragId: string): DragData {\n    return this.dragEventRegistry[dragId];\n  }\n  clearDragData(dragId: string): boolean {\n    return delete this.dragEventRegistry[dragId];\n  }\n  addViewContainerItem(identifier: string, entry: ViewContainerItem) {\n    this.viewContainerRegistry[identifier] = entry;\n  }\n  getViewContainerItem(identifer: string): ViewContainerItem {\n    return this.viewContainerRegistry[identifer];\n  }\n  getAllViewContainerItem(): ViewContainerItem[] {\n    return Object.keys(this.viewContainerRegistry).map(\n      key => this.viewContainerRegistry[key]\n    );\n  }\n  removeViewContainerItem(identifer: string): boolean {\n    return delete this.viewContainerRegistry[identifer];\n  }\n  checkViewContainerItemEntry(identifer: string) {\n    return identifer in this.viewContainerRegistry;\n  }\n}\n","import {\n  Directive,\n  HostListener,\n  ElementRef,\n  Input,\n  OnInit,\n  OnDestroy\n} from \"@angular/core\";\nimport { GInternalRegistryService } from \"../services/internal-registry.service\";\nimport { DraggableDirectiveConfig } from \"../models/draggable-directive.config\";\nimport { DragData } from \"../models/drag-data.model\";\n\n@Directive({\n  selector: \"[gDraggable]\"\n})\nexport class DraggableDirective implements OnInit, OnDestroy {\n  // tslint:disable-next-line:no-input-rename\n  @Input(\"gConfig\") config: DraggableDirectiveConfig;\n\n  private registered = false;\n  private offsetX: any;\n  private offsetY: any;\n  constructor(\n    private elementRef: ElementRef,\n    private internalRegistry: GInternalRegistryService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.internalRegistry.registerWidget(this.config)) {\n      this.registered = true;\n      this.elementRef.nativeElement.setAttribute(\"draggable\", \"true\");\n    } else {\n      console.error(`Widget id ${this.config.widgetId} is not unique`);\n      this.showInvalidWidget();\n    }\n  }\n  ngOnDestroy(): void {\n    this.internalRegistry.unRegisterWidget(this.config.widgetId);\n  }\n  showInvalidWidget() {\n    const border = this.elementRef.nativeElement.style.border;\n    this.elementRef.nativeElement.style.border = \"2px solid red\";\n    setTimeout(() => {\n      this.elementRef.nativeElement.style.border = border;\n    }, 2000);\n  }\n  @HostListener(\"mousedown\", [\"$event\"])\n  mouseDownHandler(event: MouseEvent) {\n    if (this.registered) {\n      this.offsetX = event.offsetX;\n      this.offsetY = event.offsetY;\n      console.log(`x: ${this.offsetX},y : ${this.offsetY}`);\n    }\n  }\n  @HostListener(\"dragstart\", [\"$event\"])\n  dragStartHandler(event: DragEvent) {\n    if (this.registered) {\n      if (this.config.dragImage && false) {\n        const image = new Image(\n          this.config.componentWidth,\n          this.config.componentHeight\n        );\n        image.src = this.config.dragImage;\n        event.dataTransfer.setDragImage(image, 0, 0);\n      }\n      const eventId = \"drag_\" + Math.floor(Math.random() * 9999999) + 1;\n      this.internalRegistry.addDragData(eventId, {\n        offsetX: this.offsetX,\n        offsetY: this.offsetY,\n        widgetId: this.config.widgetId\n      });\n      event.dataTransfer.setData(eventId, eventId);\n    }\n  }\n  @HostListener(\"dragend\", [\"$event\"])\n  dragEndHandler(event: DragEvent) {}\n}\n","import {\n  Directive,\n  HostListener,\n  ElementRef,\n  Output,\n  EventEmitter,\n  OnInit,\n  Renderer2,\n  OnDestroy\n} from \"@angular/core\";\nimport { DropSuccessSyntheticEvent } from \"../models/drop-success-synthetic-event\";\nimport { GInternalRegistryService } from \"../services/internal-registry.service\";\nimport { DraggableDirectiveConfig } from \"../models/draggable-directive.config\";\nimport { DragData } from \"../models/drag-data.model\";\nimport { fromEvent, timer } from \"rxjs\";\nimport { debounce, takeWhile, distinctUntilChanged, tap } from \"rxjs/operators\";\n\n@Directive({\n  selector: \"[gDroppable]\"\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private internalRegistry: GInternalRegistryService\n  ) {}\n  private isAlive = true;\n  private _tempDropLocation: HTMLElement;\n  private validDropTarget = true;\n  private _current: {\n    eventId: string;\n    dragData: DragData;\n    config: DraggableDirectiveConfig;\n  };\n  @Output() dropsuccess = new EventEmitter<DropSuccessSyntheticEvent>();\n\n  ngOnInit(): void {\n    this._tempDropLocation = document.createElement(\"div\");\n    this._tempDropLocation.style.border = \"2px dashed green\";\n    this._tempDropLocation.style.position = \"absolute\";\n    fromEvent(this.elementRef.nativeElement, \"dragover\")\n      .pipe(\n        takeWhile(() => this.isAlive),\n        tap((event: DragEvent) => event.preventDefault()),\n        distinctUntilChanged((event1: DragEvent, event2: DragEvent) => {\n          return (\n            event1.clientX === event2.clientX &&\n            event1.clientY === event2.clientY\n          );\n        }),\n        debounce(() => timer(100))\n      )\n      .subscribe(this.dragOverHandler);\n  }\n  ngOnDestroy(): void {\n    this.isAlive = false;\n  }\n  @HostListener(\"dragenter\", [\"$event\"])\n  dragEnterHandler(event: DragEvent) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n    const eventId = event.dataTransfer.types[0];\n    const dragData = this.internalRegistry.getDragData(eventId);\n    const config = this.internalRegistry.getWidgetConfig(dragData.widgetId);\n    this._current = {\n      eventId: event.dataTransfer.types[0],\n      dragData: this.internalRegistry.getDragData(eventId),\n      config: this.internalRegistry.getWidgetConfig(dragData.widgetId)\n    };\n    this._tempDropLocation.style.height = config.componentHeight + \"px\";\n    this._tempDropLocation.style.width = config.componentWidth + \"px\";\n    this.renderer.appendChild(\n      this.elementRef.nativeElement,\n      this._tempDropLocation\n    );\n  }\n  dragOverHandler = (event: DragEvent) => {\n    event.preventDefault();\n    console.log(event);\n    const react = (this.elementRef\n      .nativeElement as HTMLElement).getBoundingClientRect();\n\n    const dropItemStartX =\n      event.clientX - react.left - this._current.dragData.offsetX;\n    const dropItemEndX = dropItemStartX + this._current.config.componentWidth;\n    const dropItemStartY =\n      event.clientY - react.top - this._current.dragData.offsetY;\n    const dropItemEndY = dropItemStartY + this._current.config.componentHeight;\n    this.validDropTarget = !this.internalRegistry\n      .getAllViewContainerItem()\n      .some(registryItem => {\n        return (\n          registryItem.startX < dropItemEndX &&\n          registryItem.endX > dropItemStartX &&\n          registryItem.startY < dropItemEndY &&\n          registryItem.endY > dropItemStartY\n        );\n      });\n    this._tempDropLocation.style.top = dropItemStartY + \"px\";\n    this._tempDropLocation.style.left = dropItemStartX + \"px\";\n    // tslint:disable-next-line:semicolon\n    this._tempDropLocation.style.borderColor = this.validDropTarget\n      ? \"Green\"\n      : \"Red\";\n  };\n\n  @HostListener(\"dragleave\", [\"$event\"])\n  dragLeaveHandler(event: DragEvent) {\n    console.log(\"drag leave\");\n  }\n  @HostListener(\"drop\", [\"$event\"])\n  dropHandler(event: DragEvent) {\n    event.preventDefault();\n    if (this.validDropTarget) {\n      const dropSuccessEvent: DropSuccessSyntheticEvent = {\n        event: event,\n        componentName: this._current.config.componentName,\n        dragSourceSelector: this._current.config.widgetId,\n        widgetId: this._current.config.widgetId,\n        style: {\n          position: \"absolute\",\n          \"top.px\": this._tempDropLocation.style.top.replace(/px/, \"\"),\n          \"left.px\": this._tempDropLocation.style.left.replace(/px/, \"\")\n        }\n      };\n\n      this.dropsuccess.emit(dropSuccessEvent);\n    }\n    this.renderer.removeChild(\n      this.elementRef.nativeElement,\n      this._tempDropLocation\n    );\n  }\n}\n","import { Injectable, Type } from \"@angular/core\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class GComponentRegistryService {\n  private registry = new Set<Type<{}>>();\n  constructor() {}\n  register(\n    componentName: string,\n    component: Type<{}>\n  ): GComponentRegistryService {\n    if (this.registry[componentName]) {\n      console.warn(\n        `${componentName} already exists in registry. Will be overwriten.`\n      );\n    }\n    this.registry[componentName] = component;\n    return this;\n  }\n  get(componentName: string) {\n    return this.registry[componentName];\n  }\n}\n","import {\n  Injectable,\n  ComponentFactoryResolver,\n  ComponentFactory\n} from \"@angular/core\";\nimport { GComponentRegistryService } from \"./component-registry.service\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class GComponentFactoryService {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private registry: GComponentRegistryService\n  ) {}\n\n  componentFactory(componentName: string): ComponentFactory<{}> {\n    const factory = this.resolver.resolveComponentFactory(\n      this.registry.get(componentName)\n    );\n    return factory;\n  }\n}\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n  Input,\n  ChangeDetectionStrategy,\n  OnChanges,\n  SimpleChanges,\n  Output,\n  EventEmitter\n} from \"@angular/core\";\nimport { GComponentFactoryService } from \"../../services/component-factory.service\";\nimport { IWidgetProjection } from \"../../interfaces/IWidgetProjection\";\nimport { takeWhile, first } from \"rxjs/operators\";\nimport { DropZoneState } from \"../../models/drop-zone.state\";\nimport { DropSuccessSyntheticEvent } from \"../../models/drop-success-synthetic-event\";\nimport { GComponentRegistryService } from \"../../services/component-registry.service\";\nimport { GInternalRegistryService } from \"../../services/internal-registry.service\";\nimport { ViewContainerItem } from \"../../models/view-container-item.model\";\n\n@Component({\n  selector: \"g-drop-zone\",\n  template: `\n    <div (dropsuccess)=\"dropsuccessHandler($event)\" gDroppable>\n      <template #dropContainer></template>\n    </div>\n  `,\n  styles: [\n    `\n      div {\n        width: 100%;\n        height: 100%;\n      }\n      div * {\n        pointer-events: none;\n      }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DropZoneComponent implements OnInit, OnChanges {\n  @Input() state: DropZoneState;\n  @Output() update = new EventEmitter<DropZoneState>();\n  @ViewChild(\"dropContainer\", { read: ViewContainerRef })\n  container: ViewContainerRef;\n\n  constructor(\n    private gComponentFactoryService: GComponentFactoryService,\n    private internalRegistry: GInternalRegistryService\n  ) {}\n\n  ngOnInit() {}\n  ngOnChanges(changes: SimpleChanges) {\n    if (\"state\" in changes && changes[\"state\"].firstChange) {\n      for (const key in this.state.items) {\n        if (this.state.items.hasOwnProperty(key)) {\n          const dropZoneItem = this.state.items[key];\n          this.projectWidgetInView(\n            dropZoneItem.widgetId,\n            dropZoneItem.componentName,\n            dropZoneItem.style\n          );\n        }\n      }\n    }\n  }\n  dropsuccessHandler(syntheticEvent: DropSuccessSyntheticEvent) {\n    if (\n      this.internalRegistry.checkViewContainerItemEntry(syntheticEvent.widgetId)\n    ) {\n      return console.error(\"This widget is alrady pojected in view\");\n    }\n    this.projectWidgetInView(\n      syntheticEvent.widgetId,\n      syntheticEvent.componentName,\n      syntheticEvent.style\n    );\n    this.state.items[syntheticEvent.widgetId] = {\n      componentName: syntheticEvent.componentName,\n      style: syntheticEvent.style,\n      widgetId: syntheticEvent.widgetId\n    };\n    this.state.length += 1;\n    this.update.emit(this.state);\n  }\n  projectWidgetInView(\n    identifier: string,\n    componentName: string,\n    style: object\n  ) {\n    const factory = this.gComponentFactoryService.componentFactory(\n      componentName\n    );\n    const component = this.container.createComponent(factory);\n    const widgetProjection = component.instance as IWidgetProjection;\n    widgetProjection.widgetId = identifier;\n    widgetProjection.style = style;\n    widgetProjection._remove\n      .pipe(\n        takeWhile(_ => widgetProjection.isActive),\n        first()\n      )\n      .subscribe(widgetIdentifier => {\n        this.container.remove(\n          this.internalRegistry.getViewContainerItem(widgetIdentifier)\n            .viewContainerIndex\n        );\n        this.internalRegistry.removeViewContainerItem(widgetIdentifier);\n        delete this.state.items[widgetIdentifier];\n        this.state.length -= 1;\n        this.update.emit(this.state);\n      });\n    const computedStyle = getComputedStyle(\n      component.location.nativeElement.children[0]\n    );\n    this.internalRegistry.addViewContainerItem(identifier, {\n      viewContainerIndex: this.container.length - 1,\n      startX: +style[\"left.px\"],\n      startY: +style[\"top.px\"],\n      endX: +style[\"left.px\"] + +computedStyle.width.replace(/px/, \"\"),\n      endY: +style[\"top.px\"] + +computedStyle.height.replace(/px/, \"\")\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { DraggableDirective, DroppableDirective } from \"./directives\";\nimport { DropZoneComponent } from \"./components\";\nimport { GInternalRegistryService, GComponentFactoryService } from \"./services\";\n\n@NgModule({\n  declarations: [DraggableDirective, DroppableDirective, DropZoneComponent],\n  imports: [CommonModule],\n  providers: [GComponentFactoryService, GInternalRegistryService],\n  exports: [DraggableDirective, DroppableDirective, DropZoneComponent]\n})\nexport class DragyModule {}\n","import { Output, EventEmitter, Input, OnDestroy } from \"@angular/core\";\r\n\r\nexport class IWidgetProjection implements OnDestroy {\r\n  isActive = true;\r\n  @Input() widgetId: string;\r\n  @Input() style: object;\r\n  @Output() _remove = new EventEmitter<string>();\r\n  remove() {\r\n    this._remove.emit(this.widgetId);\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.isActive = false;\r\n  }\r\n}\r\n","export class DragData {\r\n  widgetId: string;\r\n  offsetX: number;\r\n  offsetY: number;\r\n}\r\n","export class DraggableDirectiveConfig {\r\n  componentName: string;\r\n  widgetId: string;\r\n  dragImage: string;\r\n  componentHeight: number;\r\n  componentWidth: number;\r\n}\r\n","export class DropSuccessSyntheticEvent {\r\n  event: Event;\r\n  dragSourceSelector: string;\r\n  widgetId: string;\r\n  componentName: string;\r\n  style: object;\r\n}\r\n","import { Type } from \"@angular/core\";\r\n\r\nexport class DropZoneState {\r\n  length: number;\r\n  items: { [key: string]: DropZoneItem };\r\n  constructor() {\r\n    this.length = 0;\r\n    this.items = {};\r\n  }\r\n}\r\n\r\nexport class DropZoneItem {\r\n  widgetId: string;\r\n  style: object;\r\n  componentName: string;\r\n}\r\n","export class ViewContainerItem {\r\n  viewContainerIndex: number;\r\n  startX: number;\r\n  endX: number;\r\n  startY: number;\r\n  endY: number;\r\n}\r\n"]}